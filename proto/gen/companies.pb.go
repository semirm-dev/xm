// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: companies.proto

package gen

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CompanyType int32

const (
	CompanyType_Corporations       CompanyType = 0
	CompanyType_NonProfit          CompanyType = 1
	CompanyType_Cooperative        CompanyType = 2
	CompanyType_SoleProprietorship CompanyType = 3
)

// Enum value maps for CompanyType.
var (
	CompanyType_name = map[int32]string{
		0: "Corporations",
		1: "NonProfit",
		2: "Cooperative",
		3: "SoleProprietorship",
	}
	CompanyType_value = map[string]int32{
		"Corporations":       0,
		"NonProfit":          1,
		"Cooperative":        2,
		"SoleProprietorship": 3,
	}
)

func (x CompanyType) Enum() *CompanyType {
	p := new(CompanyType)
	*p = x
	return p
}

func (x CompanyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompanyType) Descriptor() protoreflect.EnumDescriptor {
	return file_companies_proto_enumTypes[0].Descriptor()
}

func (CompanyType) Type() protoreflect.EnumType {
	return &file_companies_proto_enumTypes[0]
}

func (x CompanyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompanyType.Descriptor instead.
func (CompanyType) EnumDescriptor() ([]byte, []int) {
	return file_companies_proto_rawDescGZIP(), []int{0}
}

type AddCompanyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description  string      `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	EmployeesNum uint32      `protobuf:"varint,3,opt,name=employees_num,json=employeesNum,proto3" json:"employees_num,omitempty"`
	Registered   bool        `protobuf:"varint,4,opt,name=registered,proto3" json:"registered,omitempty"`
	CompanyType  CompanyType `protobuf:"varint,5,opt,name=company_type,json=companyType,proto3,enum=companies.CompanyType" json:"company_type,omitempty"`
}

func (x *AddCompanyRequest) Reset() {
	*x = AddCompanyRequest{}
	mi := &file_companies_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddCompanyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCompanyRequest) ProtoMessage() {}

func (x *AddCompanyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_companies_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCompanyRequest.ProtoReflect.Descriptor instead.
func (*AddCompanyRequest) Descriptor() ([]byte, []int) {
	return file_companies_proto_rawDescGZIP(), []int{0}
}

func (x *AddCompanyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddCompanyRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AddCompanyRequest) GetEmployeesNum() uint32 {
	if x != nil {
		return x.EmployeesNum
	}
	return 0
}

func (x *AddCompanyRequest) GetRegistered() bool {
	if x != nil {
		return x.Registered
	}
	return false
}

func (x *AddCompanyRequest) GetCompanyType() CompanyType {
	if x != nil {
		return x.CompanyType
	}
	return CompanyType_Corporations
}

type ModifyCompanyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Description  string      `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	EmployeesNum uint32      `protobuf:"varint,3,opt,name=employees_num,json=employeesNum,proto3" json:"employees_num,omitempty"`
	Registered   bool        `protobuf:"varint,4,opt,name=registered,proto3" json:"registered,omitempty"`
	CompanyType  CompanyType `protobuf:"varint,5,opt,name=company_type,json=companyType,proto3,enum=companies.CompanyType" json:"company_type,omitempty"`
}

func (x *ModifyCompanyRequest) Reset() {
	*x = ModifyCompanyRequest{}
	mi := &file_companies_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModifyCompanyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyCompanyRequest) ProtoMessage() {}

func (x *ModifyCompanyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_companies_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyCompanyRequest.ProtoReflect.Descriptor instead.
func (*ModifyCompanyRequest) Descriptor() ([]byte, []int) {
	return file_companies_proto_rawDescGZIP(), []int{1}
}

func (x *ModifyCompanyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ModifyCompanyRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ModifyCompanyRequest) GetEmployeesNum() uint32 {
	if x != nil {
		return x.EmployeesNum
	}
	return 0
}

func (x *ModifyCompanyRequest) GetRegistered() bool {
	if x != nil {
		return x.Registered
	}
	return false
}

func (x *ModifyCompanyRequest) GetCompanyType() CompanyType {
	if x != nil {
		return x.CompanyType
	}
	return CompanyType_Corporations
}

type DeleteCompanyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteCompanyRequest) Reset() {
	*x = DeleteCompanyRequest{}
	mi := &file_companies_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCompanyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCompanyRequest) ProtoMessage() {}

func (x *DeleteCompanyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_companies_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCompanyRequest.ProtoReflect.Descriptor instead.
func (*DeleteCompanyRequest) Descriptor() ([]byte, []int) {
	return file_companies_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteCompanyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type FindCompanyByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *FindCompanyByIDRequest) Reset() {
	*x = FindCompanyByIDRequest{}
	mi := &file_companies_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindCompanyByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindCompanyByIDRequest) ProtoMessage() {}

func (x *FindCompanyByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_companies_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindCompanyByIDRequest.ProtoReflect.Descriptor instead.
func (*FindCompanyByIDRequest) Descriptor() ([]byte, []int) {
	return file_companies_proto_rawDescGZIP(), []int{3}
}

func (x *FindCompanyByIDRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CompanyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description  string      `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	EmployeesNum uint32      `protobuf:"varint,4,opt,name=employees_num,json=employeesNum,proto3" json:"employees_num,omitempty"`
	Registered   bool        `protobuf:"varint,5,opt,name=registered,proto3" json:"registered,omitempty"`
	CompanyType  CompanyType `protobuf:"varint,6,opt,name=company_type,json=companyType,proto3,enum=companies.CompanyType" json:"company_type,omitempty"`
}

func (x *CompanyResponse) Reset() {
	*x = CompanyResponse{}
	mi := &file_companies_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompanyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyResponse) ProtoMessage() {}

func (x *CompanyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_companies_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyResponse.ProtoReflect.Descriptor instead.
func (*CompanyResponse) Descriptor() ([]byte, []int) {
	return file_companies_proto_rawDescGZIP(), []int{4}
}

func (x *CompanyResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CompanyResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CompanyResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CompanyResponse) GetEmployeesNum() uint32 {
	if x != nil {
		return x.EmployeesNum
	}
	return 0
}

func (x *CompanyResponse) GetRegistered() bool {
	if x != nil {
		return x.Registered
	}
	return false
}

func (x *CompanyResponse) GetCompanyType() CompanyType {
	if x != nil {
		return x.CompanyType
	}
	return CompanyType_Corporations
}

var File_companies_proto protoreflect.FileDescriptor

var file_companies_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc9, 0x01, 0x0a, 0x11, 0x41, 0x64,
	0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65,
	0x65, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x6d,
	0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x4e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0c, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0xc8, 0x01, 0x0a, 0x14, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65,
	0x65, 0x73, 0x4e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x26, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x28, 0x0a, 0x16, 0x46, 0x69, 0x6e, 0x64,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0xd7, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d,
	0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x4e, 0x75,
	0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x12, 0x39, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x54, 0x79, 0x70, 0x65, 0x2a, 0x57, 0x0a, 0x0b,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x43,
	0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x00, 0x12, 0x0d, 0x0a,
	0x09, 0x4e, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b,
	0x43, 0x6f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x10, 0x02, 0x12, 0x16, 0x0a,
	0x12, 0x53, 0x6f, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x65, 0x74, 0x6f, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x10, 0x03, 0x32, 0xc5, 0x02, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x69, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x12, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2e, 0x41, 0x64,
	0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4e, 0x0a,
	0x0d, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x1f,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a,
	0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x1f,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0f, 0x46, 0x69, 0x6e,
	0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x42, 0x79, 0x49, 0x44, 0x12, 0x21, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x85, 0x01,
	0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x42,
	0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x20, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x75,
	0x66, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2f, 0x62, 0x75, 0x66, 0x2d, 0x74, 0x6f, 0x75, 0x72, 0x2f,
	0x67, 0x65, 0x6e, 0xa2, 0x02, 0x03, 0x43, 0x58, 0x58, 0xaa, 0x02, 0x09, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x69, 0x65, 0x73, 0xca, 0x02, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65,
	0x73, 0xe2, 0x02, 0x15, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x09, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x69, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_companies_proto_rawDescOnce sync.Once
	file_companies_proto_rawDescData = file_companies_proto_rawDesc
)

func file_companies_proto_rawDescGZIP() []byte {
	file_companies_proto_rawDescOnce.Do(func() {
		file_companies_proto_rawDescData = protoimpl.X.CompressGZIP(file_companies_proto_rawDescData)
	})
	return file_companies_proto_rawDescData
}

var file_companies_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_companies_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_companies_proto_goTypes = []any{
	(CompanyType)(0),               // 0: companies.CompanyType
	(*AddCompanyRequest)(nil),      // 1: companies.AddCompanyRequest
	(*ModifyCompanyRequest)(nil),   // 2: companies.ModifyCompanyRequest
	(*DeleteCompanyRequest)(nil),   // 3: companies.DeleteCompanyRequest
	(*FindCompanyByIDRequest)(nil), // 4: companies.FindCompanyByIDRequest
	(*CompanyResponse)(nil),        // 5: companies.CompanyResponse
	(*emptypb.Empty)(nil),          // 6: google.protobuf.Empty
}
var file_companies_proto_depIdxs = []int32{
	0, // 0: companies.AddCompanyRequest.company_type:type_name -> companies.CompanyType
	0, // 1: companies.ModifyCompanyRequest.company_type:type_name -> companies.CompanyType
	0, // 2: companies.CompanyResponse.company_type:type_name -> companies.CompanyType
	1, // 3: companies.Companies.AddCompany:input_type -> companies.AddCompanyRequest
	2, // 4: companies.Companies.ModifyCompany:input_type -> companies.ModifyCompanyRequest
	3, // 5: companies.Companies.DeleteCompany:input_type -> companies.DeleteCompanyRequest
	4, // 6: companies.Companies.FindCompanyByID:input_type -> companies.FindCompanyByIDRequest
	5, // 7: companies.Companies.AddCompany:output_type -> companies.CompanyResponse
	5, // 8: companies.Companies.ModifyCompany:output_type -> companies.CompanyResponse
	6, // 9: companies.Companies.DeleteCompany:output_type -> google.protobuf.Empty
	5, // 10: companies.Companies.FindCompanyByID:output_type -> companies.CompanyResponse
	7, // [7:11] is the sub-list for method output_type
	3, // [3:7] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_companies_proto_init() }
func file_companies_proto_init() {
	if File_companies_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_companies_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_companies_proto_goTypes,
		DependencyIndexes: file_companies_proto_depIdxs,
		EnumInfos:         file_companies_proto_enumTypes,
		MessageInfos:      file_companies_proto_msgTypes,
	}.Build()
	File_companies_proto = out.File
	file_companies_proto_rawDesc = nil
	file_companies_proto_goTypes = nil
	file_companies_proto_depIdxs = nil
}
